---
import type { ImageMetadata } from 'astro';
import { getImage } from 'astro:assets';

type ImageFormat = 'jpg' | 'png' | 'webp' | 'avif';

type Props = {
  srcPaths: [string, string?];
  mediaQuery?: number;
  classNames?: string;
  alt?: string;
  loading?: 'lazy' | 'eager';
  format?: ImageFormat;
  quality?: number;
  pictureAttributes?: Record<string, string>;
  imgAttributes?: Record<string, string>;
};

const { srcPaths, mediaQuery = 767.9, classNames, alt = '', loading = 'lazy', format = 'webp', quality, pictureAttributes = {}, imgAttributes = {} } = Astro.props;

const importImage = async (src: string) => {
  const imageFile = import.meta.glob<{ default: ImageMetadata }>('/src/assets/**/*');

  if (!imageFile[`/src/assets/${src}`]) return;
  const moduleImage = await imageFile[`/src/assets/${src}`]();

  const { default: imageSrc } = moduleImage;
  const image = await getImage({
    src: imageSrc,
    format: format,
    quality: quality || getDefaultQuality(format),
  });
  const { loading: loadingMode, ...attributes } = image.attributes;
  return { src: image.src, attributes };
};

const getDefaultQuality = (format: ImageFormat): number => {
  switch (format) {
    case 'png':
      return 80;
    case 'webp':
    case 'avif':
      return 85;
    default:
      return 90;
  }
};

const importImages = async () => {
  return Promise.all(
    srcPaths.map(async (src) => {
      if (!src) return;
      return importImage(src);
    })
  );
};

const applyDataAttributes = (attributes: Record<string, string>) => {
  return Object.entries(attributes).reduce((acc, [key, value]) => {
    return { ...acc, [`data-${key}`]: value };
  }, {});
};

const images = await importImages();
---

{
  (
    <>
      {images.length === 1 ? (
        <img src={images[0]?.src} {...images[0]?.attributes} {...applyDataAttributes(imgAttributes)} loading={loading} alt={alt} class:list={['i', classNames]} />
      ) : (
        <picture class:list={[classNames]} {...applyDataAttributes(pictureAttributes)}>
          <source media={`(max-width: ${mediaQuery}px)`} srcset={images[0]?.src} />
          <img src={images[1]?.src} {...images[1]?.attributes} loading={loading} alt={alt} class="i" {...applyDataAttributes(imgAttributes)} />
        </picture>
      )}
    </>
  )
}
